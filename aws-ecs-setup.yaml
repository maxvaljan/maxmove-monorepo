AWSTemplateFormatVersion: '2010-09-09'
Description: 'MaxMove ECS Infrastructure'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the ECS cluster will be created
  
  SubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
    Description: A list of public subnet IDs (at least two in different AZs)
  
  Certificate:
    Type: String
    Default: ''
    Description: ARN of the SSL certificate for HTTPS (optional)

Conditions:
  HasCertificate: !Not [!Equals [!Ref Certificate, '']]

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: maxmove-cluster

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MaxMove load balancers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MaxMove containers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Backend Task Definition
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: maxmove-backend-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/maxmove-backend:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  # Web UI Task Definition
  WebUiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: maxmove-web-ui-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: web-ui
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/maxmove-web-ui:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref WebUiLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: web-ui

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/maxmove-backend
      RetentionInDays: 14

  WebUiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/maxmove-web-ui
      RetentionInDays: 14

  # Load Balancers
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: maxmove-backend-alb
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref SubnetIDs

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: maxmove-backend-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  BackendHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: !If [HasCertificate, redirect, forward]
          !If 
            - HasCertificate
            - RedirectConfig:
                Protocol: HTTPS
                Port: 443
                StatusCode: HTTP_301
            - TargetGroupArn: !Ref BackendTargetGroup

  BackendHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  WebUiLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: maxmove-web-ui-alb
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref SubnetIDs

  WebUiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: maxmove-web-ui-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  WebUiHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebUiLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: !If [HasCertificate, redirect, forward]
          !If 
            - HasCertificate
            - RedirectConfig:
                Protocol: HTTPS
                Port: 443
                StatusCode: HTTP_301
            - TargetGroupArn: !Ref WebUiTargetGroup

  WebUiHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasCertificate
    Properties:
      LoadBalancerArn: !Ref WebUiLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebUiTargetGroup

  # ECS Services
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendHttpListener
    Properties:
      ServiceName: maxmove-backend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !Ref SubnetIDs
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 3000
          TargetGroupArn: !Ref BackendTargetGroup

  WebUiService:
    Type: AWS::ECS::Service
    DependsOn: WebUiHttpListener
    Properties:
      ServiceName: maxmove-web-ui-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref WebUiTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !Ref SubnetIDs
      LoadBalancers:
        - ContainerName: web-ui
          ContainerPort: 3000
          TargetGroupArn: !Ref WebUiTargetGroup

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
    
  BackendServiceName:
    Description: The name of the backend service
    Value: !Ref BackendService
    
  WebUiServiceName:
    Description: The name of the web UI service
    Value: !Ref WebUiService
    
  BackendLoadBalancerDNS:
    Description: The DNS name of the backend load balancer
    Value: !GetAtt BackendLoadBalancer.DNSName
    
  WebUiLoadBalancerDNS:
    Description: The DNS name of the web UI load balancer
    Value: !GetAtt WebUiLoadBalancer.DNSName